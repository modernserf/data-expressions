// # Operations
// DatEx patterns are generators that yield `{ match, replace }` objects. These functions provide a more usable interface to getting results from patterns.

// ## `.matchAll`
// Returns a match object, with the following properties:
// - `matched`: `true` if the match succeeded, `false` if it failed
// - `result`: the first match result, or `undefined` if the match failed
//
// It also works as an iterator that yields _all_ match results.
export function matchAll (pattern, focus) {
  const gen = pattern(focus)

  const { value, done } = gen.next()

  const matched = !done
  const firstMatch = matched ? value.match : undefined

  return {
    matched,
    result: firstMatch,
    * [Symbol.iterator] () {
      if (!matched) { return }
      yield firstMatch
      for (const { match } of gen) {
        yield match
      }
    }
  }
}

export function test_op_matchAll (expect, dx) {
  const m = dx`*`.matchAll(['foo', 'bar', 'baz'])
  expect(m.matched).toEqual(true)
  expect(m.result).toEqual('foo')
  expect([...m]).toEqual(['foo', 'bar', 'baz'])
}

// ## `.test`
// Returns `true` if the match succeeded, `false` if it failed
export function test (pattern, focus) {
  return matchAll(pattern, focus).matched
}
export function test_op_test (expect, dx) {
  expect(dx`.foo.bar`.test({ foo: { bar: 3 } }))
    .toEqual(true)
}

// ## `.match`
// Returns the first match result, or `undefined` if the match failed.
export function match (pattern, focus) {
  return matchAll(pattern, focus).result
}

export function test_op_match (expect, dx) {
  expect(dx`.foo.bar`.match({ foo: { bar: 3 } }))
    .toEqual(3)
}

// ## `.replace`
// Returns the focus with its matched value replaced if the match succeded; otherwise returns the original focus.
export function replace (pattern, focus, value) {
  for (const { replace } of pattern(focus)) {
    return replace(value)
  }
  return focus
}

export function test_op_replace (expect, dx) {
  expect(dx`.foo.bar`.replace({ foo: { bar: 3 } }, 5))
    .toEqual({ foo: { bar: 5 } })
}

// ## `.updateAll`
// TODO.
export function * updateAll (pattern, focus, fn) {
  for (const { match, replace } of pattern(focus)) {
    yield replace(fn(match))
  }
}

// ## `decoratePattern`
// Decorates a pattern with these functions to use in an "object-oriented" style. Used by patterns generated by the `dx` template string.
export function decoratePattern (pattern) {
  pattern.test = (focus) => test(pattern, focus)
  pattern.match = (focus) => match(pattern, focus)
  pattern.matchAll = (focus) => matchAll(pattern, focus)
  pattern.replace = (focus, value) => replace(pattern, focus, value)
  pattern.updateAll = (focus, value) => updateAll(pattern, focus, value)
  return pattern
}
